swagger: '2.0'
info:
  title: "Mechanic API"
  description: "API to manage a Mechanic Shop"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header


paths:
  
  /customers: # ------------------------------------------------------------------------------------------------------------------- Customer Paths
    
    post: # ------------------------------------------------------------------------------------------------------------------- Create Customer
        tags:
          - Customers 
        summary: Create a New Customer Account
        description: Send JSON payload including customer information to create a new customer in database.
        parameters:
          - in: body
            name: body
            description: information of customer to be created
            required: true
            schema:
              $ref: '#/definitions/CreateCustomerPayload'
        responses:
          201:
            description: Successful Creation 
            schema: 
              $ref: '#/definitions/CreateCustomerResponse'
            examples:
              application/json:
                email: "jhon@gmail.com"
                id: 1
                name: "John Doe"
                phone: "1234567890"
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Customers
      tags:
        - Customers 
      summary: Get All Customers 
      description: Returns all customers in database  
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllCustomers'
          examples:
            application/json:
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              phone: "1234567890"
  
  /customers/{id}:  # ------------------------------------------------------------------------------------------------------------------- Customer By ID Path
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Customer By ID
      tags:
        - Customers 
      summary: Gets Customer Account (Customer ID Required)
      description: Returns an existing customer account, requires Customer ID.
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the customer to get 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllCustomers'
          examples:
            application/json:
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              phone: "1234567890"
    
    put:  # ------------------------------------------------------------------------------------------------------------------- Update Customer
      tags:
        - Customers 
      summary: Update Customer Account (Customer ID Required)
      description: Update an existing customer account, requires Customer ID. 
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the customer to update
        - in: body
          name: body 
          required: true
          description: Updated Customer Information
          schema:
            $ref: '#/definitions/CreateCustomerPayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateCustomerResponse'
          examples:
            application/json:
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              phone: "1234567890"
    
    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Customer
      tags:
        - Customers 
      summary: Delete Customer Account (Needs Customer ID)
      description: Delete Customer with the passed in Customer ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Customer with the passed in Customer ID
      responses:
        200:
          description: Successfully Deleted Customer Account
          schema:
            type: string
          examples:
            application/json:
              "Deleted Customer: John"
  
  
  /mechanics/login: # ------------------------------------------------------------------------------------------------------------------- Login Mechanic Path
    post: # ------------------------------------------------------------------------------------------------------------------- Login Mechanic
      tags:
        - Mechanics
      summary: Mechanic Login (generates token)
      description: Post login credentials if valid, user credentials will be minted and returned 
      parameters:
        - in: body
          name: body
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Successful Login
          schema:
            type: object
            properties:
              token:
                type: string
          examples:
            application/json:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  /mechanics: # ------------------------------------------------------------------------------------------------------------------- Mechanics Paths
    
    post: # ------------------------------------------------------------------------------------------------------------------- Create Mechanic
      tags:
        - Mechanics
      summary: Create a New Mechanic Account
      description: Send JSON payload including mechanic information to create a new mechanic in database.
      parameters:
        - in: body
          name: body
          description: information of mechanic to be created
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Mechanics
      tags:
        - Mechanics
      summary: Get Mechanics
      description: Returns all mechanics 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllMechanics'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"
    
    put:  # ------------------------------------------------------------------------------------------------------------------- Update Mechanic
      tags:
        - Mechanics
      summary: Update Mechanic Account (Token Required)
      description: Update an existing mechanic account, requires mechanic to be logged in. 
      security: 
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: Information used to update mechanic 
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"

  /mechanics/{id}:  # ------------------------------------------------------------------------------------------------------------------- Mechanic By ID Paths
    
    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Mechanic
      tags:
        - Mechanics
      summary: Delete Mechanic Account (Needs Token)
      description: Delete Mechanic with the passed in Mechanic ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Mechanic with the passed in Mechanic ID
      responses:
        200:
          description: Successfully Deleted Mechanic Account
          schema:
            type: string
          examples:
            application/json:
              "Deleted Mechanic: John"
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic by ID
      tags:
        - Mechanics 
      summary: Get a specific Mechanic using ID
      description: Pass in a Mechanic ID as a path parameter and returns specified Mechanic
      parameters:
        - in: path 
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Mechanic ID
      responses:
        200:
          description: Successful Query
          schema:
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"
    
  /mechanics/search:  # ------------------------------------------------------------------------------------------------------------------- Mechanic By Search Parameter Path
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic by Search Parameter
      tags:
        - Mechanics 
      summary: Search Mechanic(s) by name. 
      description: Pass in a name or partial name and returns matching mechanics. 
      parameters:
        - in: query 
          name: search 
          schema:
            type: string
          description: Name of mechanic(s) to search. 
      responses:
        200:
          description: Successful Search 
          schema:
            $ref: "#/definitions/SearchMechanicsList"

  /mechanics/activity_tracker: # ------------------------------------------------------------------------------------------------------------------- Mechanic Activity Tracker Path
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic Activity
      tags:
        - Mechanics 
      summary: Returns list of mechanics based on activity
      description: Returns a list of mechanics, most active to least based on ticket assignment.
      responses:
        200:
          description: Successful Retrieval
          schema:
            $ref: '#/definitions/GetAllMechanics'

  /mechanics/paginated: # ------------------------------------------------------------------------------------------------------------------- Mechanic Paginated Path
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic Paginated 
      tags:
        - Mechanics
      summary: Returns Mechanics two entries per page. 
      description: Returns two mechanics per page 
      parameters:
        - in: query
          name: page 
          type: integer 
          required: true
          description: Page Number default at 1.
          default: 1
        - in: query
          name: per_page
          type: integer
          required: true
          description: Number of entries per page 
          default: 2
      responses:
        200:
          description: Successful Retrieval
          schema:
            $ref: '#/definitions/GetAllMechanics'


  /services:  # ------------------------------------------------------------------------------------------------------------------- Services Path

    post: # ------------------------------------------------------------------------------------------------------------------- Create Service
      tags:
        - Services 
      summary: Create a New Service 
      description: Send JSON payload including service information to create a new service in database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: information of service to be created
          required: true
          schema:
            $ref: '#/definitions/CreateServicePayload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/CreateServiceResponse'
          examples:
            application/json:
              id: 1
              name: "Oil Change"

    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Services
      tags:
        - Services
      summary: Get All Services 
      description: Returns all services in database  
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllCustomers'
          examples:
            application/json:
              id: 1
              name: "Oil Change"
  
  /services/{id}: # ------------------------------------------------------------------------------------------------------------------- Services By ID Path

    get:  # ------------------------------------------------------------------------------------------------------------------- Get Service By ID
      tags:
        - Services
      summary: Gets Service (Service ID Required)
      description: Returns an existing service, requires Service ID.
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the service to get 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllServices'
          examples:
            application/json:
              id: 1
              service_desc: "Oil Change"

    put:  # ------------------------------------------------------------------------------------------------------------------- Update Service
      tags:
        - Services 
      summary: Update Service (Service ID Required)
      description: Update an existing service, requires Service ID. 
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the service to update
        - in: body
          name: body 
          required: true
          description: Updated Service Information
          schema:
            $ref: '#/definitions/CreateServicePayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateServiceResponse'
          examples:
            application/json:
              id: 1
              service_desc: "Oil Change"

    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Service
      tags:
        - Services 
      summary: Delete Service (Needs Service ID)
      description: Delete Service with the passed in Service ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Service with the passed in Customer ID
      responses:
        200:
          description: Successfully Deleted Service 
          schema:
            type: string
          examples:
            application/json:
              "Deleted Service: Oil Change"







  
  /item_descs:  # ------------------------------------------------------------------------------------------------------------------- Product Descriptions Paths
    
    post: # ------------------------------------------------------------------------------------------------------------------- Create Product Descriptions
      tags:
        - Product Descriptions 
      summary: Create a New Product Description 
      description: Send JSON payload including product information to create a new product in database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: information of product to be created
          required: true
          schema:
            $ref: '#/definitions/create_item_desc_payload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/create_item_desc_response'
          examples:
            application/json:
              id: 1
              name: "headlights"
              price: 20.55
        





definitions:
  # ------------------------------------------------------------------------------------------------------------------- Mechanic Definitions
  CreateMechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      address:
        type: string
      title:
        type: string
      salary:
        type: integer
      password:
        type: string

  CreateMechanicResponse:
    type: object
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      salary:
        type: integer
      title:
        type: string

  GetAllMechanics:
    type: array
    items:
      type: object
      properties:
        address:
          type: string
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        password:
          type: string
        phone:
          type: string
        salary:
          type: integer
        title:
          type: string

  SearchMechanicsList:
    type: object
    properties:
      mechanics: 
        type: array
        items: 
          type: object
          properties:
            address:
              type: string
            email:
              type: string
            id:
              type: integer
            name:
              type: string
            password:
              type: string
            phone:
              type: string
            salary:
              type: integer
            title:
              type: string
  # ------------------------------------------------------------------------------------------------------------------- Customer Definitions
  CreateCustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string

  CreateCustomerResponse:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string

  GetAllCustomers:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
  # ------------------------------------------------------------------------------------------------------------------- Item Desc Definitions
  create_item_desc_payload:
    type: object
    properties:
      name:
        type: string
      price:
        type: integer

  create_item_desc_response:
    type: object
    properties:
      id:
        type: integer
      name: 
        type: string
      price:
        type: integer 
  # ------------------------------------------------------------------------------------------------------------------- Service Definitions
  CreateServicePayload:
    type: object
    properties:
      service_desc: 
        type: string

  CreateServiceResponse:
    type: object
    properties:
      id: 
        type: integer 
      service_desc: 
        type: string 

  GetAllServices:
    type: array
    items:
      type: object
      properties:
        id: 
          type: integer
        service_desc:
          type: string




