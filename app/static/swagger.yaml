swagger: '2.0'
info:
  title: "Mechanic API"
  description: "API to manage a Mechanic Shop"
  version: "1.0.0"
host: "tonys-my-mechanic-shop-api.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header


paths:
  # ------------------------------------------------------------------------------------------------------------------- Customer Paths
  /customers: 
    
    post: # ------------------------------------------------------------------------------------------------------------------- Create Customer
        tags:
          - Customers 
        summary: Create a New Customer Account
        description: Send JSON payload including customer information to create a new customer in database.
        parameters:
          - in: body
            name: body
            description: information of customer to be created
            required: true
            schema:
              $ref: '#/definitions/CreateCustomerPayload'
        responses:
          201:
            description: Successful Creation 
            schema: 
              $ref: '#/definitions/CreateCustomerResponse'
            examples:
              application/json:
                email: "jhon@gmail.com"
                id: 1
                name: "John Doe"
                phone: "1234567890"
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Customers
      tags:
        - Customers 
      summary: Get All Customers 
      description: Returns all customers in database  
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllCustomers'
          examples:
            application/json:
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              phone: "1234567890"
  
  /customers/{id}:  
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Customer By ID
      tags:
        - Customers 
      summary: Gets Customer Account (Customer ID Required)
      description: Returns an existing customer account, requires Customer ID.
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the customer to get 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllCustomers'
          examples:
            application/json:
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              phone: "1234567890"
    
    put:  # ------------------------------------------------------------------------------------------------------------------- Update Customer
      tags:
        - Customers 
      summary: Update Customer Account (Customer ID Required)
      description: Update an existing customer account, requires Customer ID. 
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the customer to update
        - in: body
          name: body 
          required: true
          description: Updated Customer Information
          schema:
            $ref: '#/definitions/CreateCustomerPayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateCustomerResponse'
          examples:
            application/json:
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              phone: "1234567890"
    
    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Customer
      tags:
        - Customers 
      summary: Delete Customer Account (Needs Customer ID)
      description: Delete Customer with the passed in Customer ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Customer with the passed in Customer ID
      responses:
        200:
          description: Successfully Deleted Customer Account
          schema:
            type: string
          examples:
            application/json:
              "Deleted Customer: John"

  
  # ------------------------------------------------------------------------------------------------------------------- Mechanic Paths
  /mechanics/login: 
    post: # ------------------------------------------------------------------------------------------------------------------- Login Mechanic
      tags:
        - Mechanics
      summary: Mechanic Login (generates token)
      description: Post login credentials if valid, user credentials will be minted and returned 
      parameters:
        - in: body
          name: body
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Successful Login
          schema:
            type: object
            properties:
              token:
                type: string
          examples:
            application/json:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  /mechanics: 
    
    post: # ------------------------------------------------------------------------------------------------------------------- Create Mechanic
      tags:
        - Mechanics
      summary: Create a New Mechanic Account
      description: Send JSON payload including mechanic information to create a new mechanic in database.
      parameters:
        - in: body
          name: body
          description: information of mechanic to be created
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Mechanics
      tags:
        - Mechanics
      summary: Get Mechanics
      description: Returns all mechanics 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllMechanics'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"
    
    put:  # ------------------------------------------------------------------------------------------------------------------- Update Mechanic
      tags:
        - Mechanics
      summary: Update Mechanic Account (Token Required)
      description: Update an existing mechanic account, requires mechanic to be logged in. 
      security: 
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: Information used to update mechanic 
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"

  /mechanics/{id}:  
    
    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Mechanic
      tags:
        - Mechanics
      summary: Delete Mechanic Account (Needs Token)
      description: Delete Mechanic with the passed in Mechanic ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Mechanic with the passed in Mechanic ID
      responses:
        200:
          description: Successfully Deleted Mechanic Account
          schema:
            type: string
          examples:
            application/json:
              "Deleted Mechanic: John"
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic by ID
      tags:
        - Mechanics 
      summary: Get a specific Mechanic using ID
      description: Pass in a Mechanic ID as a path parameter and returns specified Mechanic
      parameters:
        - in: path 
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Mechanic ID
      responses:
        200:
          description: Successful Query
          schema:
            $ref: '#/definitions/CreateMechanicResponse'
          examples:
            application/json:
              address: "Los Angeles, CA"
              email: "jhon@gmail.com"
              id: 1
              name: "John Doe"
              password: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              phone: "1234567890"
              salary: 80000
              title: "Staff"
    
  /mechanics/search:  
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic by Search Parameter
      tags:
        - Mechanics 
      summary: Search Mechanic(s) by name. 
      description: Pass in a name or partial name and returns matching mechanics. 
      parameters:
        - in: query 
          name: search 
          schema:
            type: string
          description: Name of mechanic(s) to search. 
      responses:
        200:
          description: Successful Search 
          schema:
            $ref: "#/definitions/SearchMechanicsList"

  /mechanics/activity_tracker: 
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic Activity
      tags:
        - Mechanics 
      summary: Returns list of mechanics based on activity
      description: Returns a list of mechanics, most active to least based on ticket assignment.
      responses:
        200:
          description: Successful Retrieval
          schema:
            $ref: '#/definitions/GetAllMechanics'

  /mechanics/paginated: 
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Mechanic Paginated 
      tags:
        - Mechanics
      summary: Returns Mechanics two entries per page. 
      description: Returns two mechanics per page 
      parameters:
        - in: query
          name: page 
          type: integer 
          required: true
          description: Page Number default at 1.
          default: 1
        - in: query
          name: per_page
          type: integer
          required: true
          description: Number of entries per page 
          default: 2
      responses:
        200:
          description: Successful Retrieval
          schema:
            $ref: '#/definitions/GetAllMechanics'


  # ------------------------------------------------------------------------------------------------------------------- Services Paths
  /services:  

    post: # ------------------------------------------------------------------------------------------------------------------- Create Service
      tags:
        - Services 
      summary: Create a New Service 
      description: Send JSON payload including service information to create a new service in database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: information of service to be created
          required: true
          schema:
            $ref: '#/definitions/CreateServicePayload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/CreateServiceResponse'
          examples:
            application/json:
              id: 1
              name: "Oil Change"

    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Services
      tags:
        - Services
      summary: Get All Services 
      description: Returns all services in database  
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllCustomers'
          examples:
            application/json:
              id: 1
              name: "Oil Change"
  
  /services/{id}: 

    get:  # ------------------------------------------------------------------------------------------------------------------- Get Service By ID
      tags:
        - Services
      summary: Gets Service (Service ID Required)
      description: Returns an existing service, requires Service ID.
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the service to get 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllServices'
          examples:
            application/json:
              id: 1
              service_desc: "Oil Change"

    put:  # ------------------------------------------------------------------------------------------------------------------- Update Service
      tags:
        - Services 
      summary: Update Service (Service ID Required)
      description: Update an existing service, requires Service ID. 
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the service to update
        - in: body
          name: body 
          required: true
          description: Updated Service Information
          schema:
            $ref: '#/definitions/CreateServicePayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateServiceResponse'
          examples:
            application/json:
              id: 1
              service_desc: "Oil Change"

    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Service
      tags:
        - Services 
      summary: Delete Service (Needs Service ID)
      description: Delete Service with the passed in Service ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Service with the passed in Customer ID
      responses:
        200:
          description: Successfully Deleted Service 
          schema:
            type: string
          examples:
            application/json:
              "Deleted Service: Oil Change"


  # ------------------------------------------------------------------------------------------------------------------- Ticket Paths
  /tickets:  

    post: # ------------------------------------------------------------------------------------------------------------------- Create Ticket
      tags:
        - Tickets
      summary: Create a New Ticket 
      description: Send JSON payload including ticket information to create a new ticket in database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: information of ticket to be created
          required: true
          schema:
            $ref: '#/definitions/CreateTicketPayload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/CreateTicketResponse'
          examples:
            application/json:
              id: 101 
              service_date: "2025-05-02"
              vin: "1HGCM82633A004352"
              customer: 
                id: 12
                name: "Jane Doe"
              mechanics: 
                - id: 1
                  name: "John Wrench" 
                - id: 2
                  name: "Lana Lift"
              services: 
                - id: 5
                  service_desc: "oil Change" 
                - id: 8
                  service_desc: "Tire Rotation"

    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Tickets
      tags:
        - Tickets
      summary: Get All Tickets
      description: Returns a list of all tickets with associated customer, mechanics, and services.
      produces:
        - application/json
      responses:
        200:
          description: A list of tickets
          schema:
            $ref: '#/definitions/GetAllTicketsResponse'
          examples:
            application/json:
              - id: 101
                service_date: "2025-05-02"
                vin: "1HGCM82633A004352"
                customer:
                  id: 12
                  name: "Jane Doe"
                mechanics:
                  - id: 1
                    name: "John Wrench"
                  - id: 2
                    name: "Lana Lift"
                services:
                  - id: 5
                    service_desc: "Oil Change"
                  - id: 8
                    service_desc: "Tire Rotation"
              - id: 102
                service_date: "2025-05-03"
                vin: "1J4FA49S54P708374"
                customer:
                  id: 14
                  name: "Mike Spanner"
                mechanics:
                  - id: 3
                    name: "Terry Torque"
                services:
                  - id: 2
                    service_desc: "Brake Inspection"

  /tickets/{id}:  

    get:  # ------------------------------------------------------------------------------------------------------------------- Get Tickets By ID
      tags:
        - Tickets
      summary: Get Ticket by ID
      description: Returns a single ticket by its unique ID, including customer, mechanics, and services.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to retrieve
      responses:
        200:
          description: A single ticket object
          schema:
            $ref: '#/definitions/GetAllTickets'
          examples:
            application/json:
              id: 101
              service_date: "2025-05-02"
              vin: "1HGCM82633A004352"
              customer:
                id: 12
                name: "Jane Doe"
              mechanics:
                - id: 1
                  name: "John Wrench"
                - id: 2
                  name: "Lana Lift"
              services:
                - id: 5
                  service_desc: "Oil Change"
                - id: 8
                  service_desc: "Tire Rotation"

    put:  # ------------------------------------------------------------------------------------------------------------------- Update Ticket
      tags:
        - Tickets 
      summary: Update Ticket (Ticket ID Required)
      description: Update an existing ticket, requires Ticket ID. 
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the ticket to update
        - in: body
          name: body 
          required: true
          description: Updated Ticket Information
          schema:
            $ref: '#/definitions/CreateTicketPayload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/CreateTicketResponse'
          examples:
            application/json:
              id: 101
              service_date: "2025-05-02"
              vin: "1HGCM82633A004352"
              customer:
                id: 12
                name: "Jane Doe"
              mechanics:
                - id: 1
                  name: "John Wrench"
                - id: 2
                  name: "Lana Lift"
              services:
                - id: 5
                  service_desc: "Oil Change"
                - id: 8
                  service_desc: "Tire Rotation"







    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Ticket
      tags:
        - Tickets
      summary: Delete Ticket by ID
      description: Deletes a ticket from the database using its ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to delete
      responses:
        204:
          description: "Deleted Ticket: 6"


  # ------------------------------------------------------------------------------------------------------------------- Item Description Paths
  /item_descs:  
    
    post: # ------------------------------------------------------------------------------------------------------------------- Create Item Descriptions
      tags:
        - Item Descriptions 
      summary: Create a New Product Description 
      description: Send JSON payload including product information to create a new product in database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: information of product to be created
          required: true
          schema:
            $ref: '#/definitions/create_item_desc_payload'
      responses:
        201:
          description: Successful Creation 
          schema: 
            $ref: '#/definitions/create_item_desc_response'
          examples:
            application/json:
              id: 1
              name: "headlights"
              price: 20.55

    get:  # ------------------------------------------------------------------------------------------------------------------- Get All Item Descriptions
      tags:
        - Item Descriptions
      summary: Get All Item Descriptions  
      description: Returns all items in database  
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllItems'
          examples:
            application/json:
              id: 1
              name: "Tire"
              price: 150.99    

  /item_descs/{id}:  
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Item By ID
      tags:
        - Item Descriptions
      summary: Gets Item (Item ID Required)
      description: Returns an existing item, requires Item ID.
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the item to get 
      responses:
        200:
          description: Successful Retrieval  
          schema: 
            $ref: '#/definitions/GetAllItems'
          examples:
            application/json:
              id: 1
              name: "Tire"
              price: 150.99

    put:  # ------------------------------------------------------------------------------------------------------------------- Update Customer
      tags:
        - Item Descriptions 
      summary: Update Item Description (Item ID Required)
      description: Update an existing item, requires item ID. 
      parameters:
        - in: path 
          name: id
          schema:
            type: integer
          required: true
          description: ID of the item to update
        - in: body
          name: body 
          required: true
          description: Updated Item Information
          schema:
            $ref: '#/definitions/create_item_desc_payload'
      responses:
        200:
          description: Successful Update
          schema: 
            $ref: '#/definitions/create_item_desc_response'
          examples:
            application/json:
              id: 1
              name: "Gasket"
              price: 30.55

    delete: # ------------------------------------------------------------------------------------------------------------------- Delete Item
      tags:
        - Item Descriptions 
      summary: Delete Item Description (Needs Item ID)
      description: Delete Item with the passed in Item ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Deletes Item with the passed in Item ID
      responses:
        200:
          description: Successfully Deleted Item Description 
          schema:
            type: string
          examples:
            application/json:
              "Deleted Item: Gasket"

  /item_descs/search:  
    
    get:  # ------------------------------------------------------------------------------------------------------------------- Get Item by Search Parameter
      tags:
        - Item Descriptions  
      summary: Search Item(s) by name. 
      description: Pass in a name or partial name and returns matching items. 
      produces:
        - application/json
      parameters:
        - in: query 
          name: item
          required: true
          type: string
      responses:
        200:
          description: Successful Search 
          schema:
            $ref: "#/definitions/item_desc_response"
          examples:
            application/json:
              item: 
                id: 1
                name: "Oil Filter"
                price: 14.99
              stock: 12


  # ------------------------------------------------------------------------------------------------------------------- Serial Items Paths
  /serial_items/{description_id}: 

    post: # ------------------------------------------------------------------------------------------------------------------- Create Serial Item
      tags:
        - Serial Items
      summary: Create a new serial item
      description: Creates a new SerialItem using the given ItemDesc ID
      parameters:
        - name: description_id
          in: path
          required: true
          description: ID of the ItemDesc to associate the serial item with
          schema:
            type: integer
      responses:
        '201':
          description: Serial item successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerialItemPayload'

  /serial_items:

    get:  # ------------------------------------------------------------------------------------------------------------------- Get Serial Items
      tags:
        - Serial Items 
      summary: Retrieve all serial items 
      description: Returns a list of all serial items in the system
      produces:
        - application/json
      responses: 
        200:
          description: A list of serial items 
          schema:
            type: array
            items:
              $ref: '#/definitions/serial_item_response'
          examples:
            application/json:
              - id: 1
                description_id: 5
                ticket_id: 1
              - id: 2
                description_id: 7
                ticket_id: 3

  /serial_items/{serial_item_id}:

    delete:  # ---------------------------------------------------------------------------------------------------------------- Delete Serial Item
      tags:
        - Serial Items
      summary: Delete a serial item by ID
      description: Deletes the serial item matching the given serial item ID
      produces:
        - application/json
      parameters:
        - in: path
          name: serial_item_id
          required: true
          type: integer
          description: The ID of the serial item to delete
      responses:
        200:
          description: Successfully deleted the serial item
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Deleted Item: Oil Filter, Serial Number: 5"



definitions:

  # ------------------------------------------------------------------------------------------------------------------- Mechanic Definitions
  CreateMechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      address:
        type: string
      title:
        type: string
      salary:
        type: integer
      password:
        type: string

  CreateMechanicResponse:
    type: object
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      salary:
        type: integer
      title:
        type: string

  GetAllMechanics:
    type: array
    items:
      type: object
      properties:
        address:
          type: string
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        password:
          type: string
        phone:
          type: string
        salary:
          type: integer
        title:
          type: string

  SearchMechanicsList:
    type: object
    properties:
      mechanics: 
        type: array
        items: 
          type: object
          properties:
            address:
              type: string
            email:
              type: string
            id:
              type: integer
            name:
              type: string
            password:
              type: string
            phone:
              type: string
            salary:
              type: integer
            title:
              type: string
  
  # ------------------------------------------------------------------------------------------------------------------- Customer Definitions
  CreateCustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string

  CreateCustomerResponse:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string

  GetAllCustomers:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
  
  # ------------------------------------------------------------------------------------------------------------------- Service Definitions
  CreateServicePayload:
    type: object
    properties:
      service_desc: 
        type: string

  CreateServiceResponse:
    type: object
    properties:
      id: 
        type: integer 
      service_desc: 
        type: string 

  GetAllServices:
    type: array
    items:
      type: object
      properties:
        id: 
          type: integer
        service_desc:
          type: string

  # ------------------------------------------------------------------------------------------------------------------- Ticket Definitions
  CreateTicketPayload:
    type: object
    required:
      - service_date
      - vin
      - customer_id
      - mechanic_ids
      - service_ids
    properties:
      service_date:
        type: string
        format: date
        example: "2025-05-02"
      vin:
        type: string
        example: "1HGCM82633A004352"
      customer_id:
        type: integer
        example: 12
      mechanic_ids:
        type: array
        items:
          type: integer
        example: [1, 2]
      service_ids:
        type: array
        items:
          type: integer
        example: [5, 8]

  CreateTicketResponse:
    type: object
    properties:
      id:
        type: integer
        example: 101
      service_date:
        type: string
        format: date
        example: "2025-05-02"
      vin:
        type: string
        example: "1HGCM82633A004352"
      customer:
        type: object
        properties:
          id:
            type: integer
            example: 12
          name:
            type: string
            example: "Jane Doe"
      mechanics:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "John Wrench"
      services:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              example: 5
            service_desc:
              type: string
              example: "Oil Change"

  GetAllTicketsResponse:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        service_date:
          type: string
          format: date
        vin:
          type: string
        customer:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        mechanics:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        services:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              service_desc:
                type: string

  # ------------------------------------------------------------------------------------------------------------------- Item Desc Definitions
  create_item_desc_payload:
    type: object
    properties:
      name:
        type: string
      price:
        type: number 

  create_item_desc_response:
    type: object
    properties:
      id:
        type: integer
      name: 
        type: string
      price:
        type: number 

  GetAllItems:
    type: array
    items: 
      type: object
      properties:
        id: 
          type: integer 
        name: 
          type: string
        price:
          type: number 

  item_desc_response:
    type: object
    properties:
      item:
        type: object
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: "Oil Filter"
          price:
            type: number
            example: 14.99
      stock:
        type: integer
        example: 12

  # ------------------------------------------------------------------------------------------------------------------- Serial Items
  SerialItemPayload:
    type: object
    properties:
      id: 
        type: integer 
      description_id:
        type: integer
      ticket_id:
        type: integer

  serial_item_response:
    type: object
    properties:
      id: 
        type: integer
      description_id: 
        type: integer
      ticket_id: 
        type: integer
